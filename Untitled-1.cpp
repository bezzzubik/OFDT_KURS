#include<iostream>
#include<math.h>
#include<complex>
#include<chrono>
#include<vector>
constexpr int N=21;constexpr int DATA_LEN=14191;constexpr int COUNT_CADR=2;constexpr int COUNT_TESTS=100;
constexpr double normalizeCoef=1/sqrt(N);constexpr int COUNT_SR_TIME=10000;int i;int iGl=0;void Symbol_produce(unsigned char*,char*);
std::complex<double>short_modulation(unsigned char);int main(){std::vector<std::vector<std::vector<std::complex<double>>>>offtDataIn(17,std::vector<std::vector<std::complex<double>>>(N,std::vector<std::complex<double>>(N)));std::vector<std::complex<double>>offtDataOut(N);for(i=0;i<17;++i){for(unsigned int n=0;n<N;++n){for(unsigned int k=0;k<N;++k){offtDataIn[i][n][k]=short_modulation(i)*std::exp(std::complex<double>(0,2*M_PI*k*n/static_cast<double>(N));}}}unsigned char cadrs[COUNT_CADR];char buff[DATA_LEN]="asdefrga";int maxLen=strlen(buff);printf("Введите строку\n");printf("Введенная строка: %s\nЧисло символов в строке: %d\n",buff,maxLen);std::chrono::system_clock::time_point startTime;std::chrono::duration<double>srTime[COUNT_TESTS];std::chrono::duration<double>nowSrTime;for(int lss=0;lss<COUNT_TESTS;++lss){printf("Тест %d\n",lss);startTime=std::chrono::system_clock::now();for(unsigned long long kk=0;kk<COUNT_SR_TIME;++kk,iGl=0)while(iGl<maxLen){if(iGl>=maxLen)iGl=0;Symbol_produce(cadrs,buff);for(i=0;i<N;++i)offtDataOut[i]=offtDataIn[cadrs[0]][i][0];for(unsigned int l=0;l<N;++l){for(i=1;i<COUNT_CADR;++i){offtDataOut[l]+=offtDataIn[cadrs[i]][l][i];}for(;i<N;++i){offtDataOut[l]+=offtDataIn[16][l][i];}offtDataOut[l]*=normalizeCoef;}}srTime[lss]=std::chrono::duration<double>(std::chrono::system_clock::now()-startTime);nowSrTime+=srTime[lss];}std::cout<<"Время прохождения:"<<std::endl;for(i=0;i<COUNT_TESTS;++i)std::cout<<srTime[i].count()<<std::endl;std::cout<<"Среднее время прохождения = "<<nowSrTime.count()/COUNT_TESTS<<std::endl;return 0;}inline void Symbol_produce(unsigned char*cadrs,char*buff){for(i=0;i<COUNT_CADR;++i,++iGl){cadrs[i]=buff[iGl]&0b1111;cadrs[++i]=buff[iGl]>>4&0b1111;}}std::complex<double>short_modulation(unsigned char cadrs){std::complex<double>symbolCoding;switch(cadrs){case 0b0000:symbolCoding.real(-3.0);symbolCoding.imag(3.0);break;case 0b0001:symbolCoding.real(-1.0);symbolCoding.imag(3.0);break;case 0b0010:symbolCoding.real(-3.0);symbolCoding.imag(1.0);break;case 0b0011:symbolCoding.real(-1.0);symbolCoding.imag(1.0);break;case 0b0100:symbolCoding.real(-3.0);symbolCoding.imag(3.0);break;case 0b0101:symbolCoding.real(-1.0);symbolCoding.imag(3.0);break;case 0b0110:symbolCoding.real(-3.0);symbolCoding.imag(1.0);break;case 0b0111:symbolCoding.real(-1.0);symbolCoding.imag(1.0);break;case 0b1000:symbolCoding.real(3.0);symbolCoding.imag(3.0);break;case 0b1001:symbolCoding.real(1.0);symbolCoding.imag(3.0);break;case 0b1010:symbolCoding.real(3.0);symbolCoding.imag(1.0);break;case 0b1011:symbolCoding.real(1.0);symbolCoding.imag(1.0);break;case 0b1100:symbolCoding.real(3.0);symbolCoding.imag(3.0);break;case 0b1101:symbolCoding.real(1.0);symbolCoding.imag(3.0);break;case 0b1110:symbolCoding.real(3.0);symbolCoding.imag(1.0);break;case 0b1111:symbolCoding.real(1.0);symbolCoding.imag(1.0);break;default:symbolCoding.real(0.0);symbolCoding.imag(0.0);}return symbolCoding;}
